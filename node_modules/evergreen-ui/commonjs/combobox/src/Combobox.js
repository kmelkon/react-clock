"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _uiBox = _interopRequireWildcard(require("ui-box"));

var _autocomplete = require("../../autocomplete");

var _textInput = require("../../text-input");

var _buttons = require("../../buttons");

var Combobox =
/*#__PURE__*/
function (_PureComponent) {
  (0, _inherits2.default)(Combobox, _PureComponent);

  function Combobox(props, context) {
    var _this;

    (0, _classCallCheck2.default)(this, Combobox);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Combobox).call(this, props, context));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleStateChange", function (changes) {
      if (Object.prototype.hasOwnProperty.call(changes, 'isOpen')) {
        if (!changes.isOpen) {
          _this.setState({
            isOpenedByButton: false
          });
        }
      }
    });
    _this.state = {
      isOpenedByButton: false
    };
    return _this;
  }

  (0, _createClass2.default)(Combobox, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          items = _this$props.items,
          selectedItem = _this$props.selectedItem,
          defaultSelectedItem = _this$props.defaultSelectedItem,
          itemToString = _this$props.itemToString,
          width = _this$props.width,
          height = _this$props.height,
          onChange = _this$props.onChange,
          placeholder = _this$props.placeholder,
          inputProps = _this$props.inputProps,
          buttonProps = _this$props.buttonProps,
          openOnFocus = _this$props.openOnFocus,
          autocompleteProps = _this$props.autocompleteProps,
          props = (0, _objectWithoutProperties2.default)(_this$props, ["items", "selectedItem", "defaultSelectedItem", "itemToString", "width", "height", "onChange", "placeholder", "inputProps", "buttonProps", "openOnFocus", "autocompleteProps"]);
      return _react.default.createElement(_autocomplete.Autocomplete, (0, _extends2.default)({
        items: items,
        selectedItem: selectedItem,
        defaultSelectedItem: defaultSelectedItem,
        itemToString: itemToString,
        onChange: onChange,
        onStateChange: this.handleStateChange,
        isFilterDisabled: this.state.isOpenedByButton
      }, autocompleteProps), function (_ref) {
        var getRef = _ref.getRef,
            isShown = _ref.isShown,
            openMenu = _ref.openMenu,
            inputValue = _ref.inputValue,
            getInputProps = _ref.getInputProps,
            getButtonProps = _ref.getButtonProps,
            clearSelection = _ref.clearSelection;
        return _react.default.createElement(_uiBox.default, (0, _extends2.default)({
          innerRef: function innerRef(ref) {
            return getRef(ref);
          },
          display: "inline-flex",
          width: width
        }, props), _react.default.createElement(_textInput.TextInput, (0, _extends2.default)({
          width: 0,
          flex: 1,
          height: height,
          value: inputValue,
          borderTopRightRadius: 0,
          borderBottomRightRadius: 0
        }, getInputProps((0, _objectSpread2.default)({}, inputProps, {
          placeholder: placeholder,
          onFocus: function onFocus() {
            if (openOnFocus) openMenu();
          },
          onChange: function onChange(e) {
            if (_this2.state.isOpenedByButton) {
              _this2.setState({
                isOpenedByButton: false
              });
            }

            if (e.target.value.trim() === '') {
              // Prevent the selected item from sticking around
              clearSelection();
            }
          }
        })))), _react.default.createElement(_buttons.IconButton, (0, _extends2.default)({
          iconAim: "down",
          color: "muted",
          icon: "caret-down",
          appearance: "default",
          height: height,
          marginLeft: -1,
          paddingLeft: 0,
          paddingRight: 0,
          borderTopLeftRadius: 0,
          borderBottomLeftRadius: 0
        }, getButtonProps((0, _objectSpread2.default)({}, buttonProps, {
          onClick: function onClick() {
            if (!isShown) {
              _this2.setState({
                isOpenedByButton: true
              });
            }
          }
        })))));
      });
    }
  }]);
  return Combobox;
}(_react.PureComponent);

exports.default = Combobox;
Combobox.displayName = "Combobox";
(0, _defineProperty2.default)(Combobox, "propTypes", (0, _objectSpread2.default)({}, _uiBox.dimensions.propTypes, _uiBox.spacing.propTypes, _uiBox.position.propTypes, _uiBox.layout.propTypes, {
  /**
   * The options to show in the menu.
   */
  items: _propTypes.default.array.isRequired,

  /**
   * The selected item when controlled.
   */
  selectedItem: _propTypes.default.any,

  /**
   * Function called when value changes.
   */
  onChange: _propTypes.default.func,

  /**
   * When true, open the autocomplete on focus.
   */
  openOnFocus: _propTypes.default.bool,

  /**
   * Default selected item when uncontrolled.
   */
  defaultSelectedItem: _propTypes.default.any,

  /**
   * The placeholder text when there is no value present.
   */
  placeholder: _propTypes.default.string,

  /**
   * In case the array of items is not an array of strings,
   * this function is used on each item to return the string that will be shown on the filter
   */
  itemToString: _propTypes.default.func,

  /**
   * Properties forwarded to the input. Use with caution.
   */
  inputProps: _propTypes.default.object,

  /**
   * Properties forwarded to the button. Use with caution.
   */
  buttonProps: _propTypes.default.object,

  /**
   * Properties forwarded to the autocomplete component. Use with caution.
   */
  autocompleteProps: _propTypes.default.object
}));
(0, _defineProperty2.default)(Combobox, "defaultProps", {
  width: 240,
  openOnFocus: false
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,