{"ast":null,"code":"import _classCallCheck from \"/Users/karammalkon/Documents/React/react-clock/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/karammalkon/Documents/React/react-clock/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/karammalkon/Documents/React/react-clock/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/karammalkon/Documents/React/react-clock/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/karammalkon/Documents/React/react-clock/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/karammalkon/Documents/React/react-clock/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      hours: \"\",\n      twelveHours: \"\",\n      minutes: \"\",\n      seconds: \"\",\n      day: \"\",\n      month: \"\",\n      year: \"\",\n      formatSwitch: formatSwitch\n    };\n\n    _this.componentDidMount = function () {\n      // Call this function so that it fetch first time right after mounting the component\n      _this.getCurrentTime(); // set Interval\n\n\n      _this.interval = setInterval(_this.getCurrentTime, 1000);\n    };\n\n    _this.getCurrentTime = function () {\n      var time = new Date();\n\n      _this.setState({\n        hours: time.getHours(),\n        twelveHours: time.getHours() > 12 ? time.getHours() - 12 : time.gethours(),\n        minutes: time.getMinutes() < 10 ? \"0\".concat(time.getMinutes()) : time.getMinutes(),\n        seconds: time.getSeconds() < 10 ? \"0\".concat(time.getSeconds()) : time.getSeconds(),\n        day: time.getDate(),\n        month: time.getMonth() + 1,\n        year: time.getFullYear()\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // Clear the interval right before component unmount\n      clearInterval(this.interval);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          hours = _this$state.hours,\n          twelveHours = _this$state.twelveHours,\n          minutes = _this$state.minutes,\n          seconds = _this$state.seconds,\n          day = _this$state.day,\n          month = _this$state.month,\n          year = _this$state.year;\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \" \", \"the current time is \", hours, \":\", minutes, \":\", seconds), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"today's date is \", day, \"/\", month, \"/\", year));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/karammalkon/Documents/React/react-clock/src/App.js"],"names":["React","Component","App","state","hours","twelveHours","minutes","seconds","day","month","year","formatSwitch","componentDidMount","getCurrentTime","interval","setInterval","time","Date","setState","getHours","gethours","getMinutes","getSeconds","getDate","getMonth","getFullYear","clearInterval"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;;IAEMC,G;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,WAAW,EAAE,EAFP;AAGNC,MAAAA,OAAO,EAAE,EAHH;AAINC,MAAAA,OAAO,EAAE,EAJH;AAKNC,MAAAA,GAAG,EAAE,EALC;AAMNC,MAAAA,KAAK,EAAE,EAND;AAONC,MAAAA,IAAI,EAAE,EAPA;AAQNC,MAAAA,YAAY,EAAZA;AARM,K;;UAWRC,iB,GAAoB,YAAM;AACxB;AACA,YAAKC,cAAL,GAFwB,CAIxB;;;AACA,YAAKC,QAAL,GAAgBC,WAAW,CAAC,MAAKF,cAAN,EAAsB,IAAtB,CAA3B;AACD,K;;UAODA,c,GAAiB,YAAM;AACrB,UAAIG,IAAI,GAAG,IAAIC,IAAJ,EAAX;;AACA,YAAKC,QAAL,CAAc;AACZd,QAAAA,KAAK,EAAEY,IAAI,CAACG,QAAL,EADK;AAEZd,QAAAA,WAAW,EACTW,IAAI,CAACG,QAAL,KAAkB,EAAlB,GAAuBH,IAAI,CAACG,QAAL,KAAkB,EAAzC,GAA8CH,IAAI,CAACI,QAAL,EAHpC;AAIZd,QAAAA,OAAO,EACLU,IAAI,CAACK,UAAL,KAAoB,EAApB,cAA6BL,IAAI,CAACK,UAAL,EAA7B,IAAmDL,IAAI,CAACK,UAAL,EALzC;AAMZd,QAAAA,OAAO,EACLS,IAAI,CAACM,UAAL,KAAoB,EAApB,cAA6BN,IAAI,CAACM,UAAL,EAA7B,IAAmDN,IAAI,CAACM,UAAL,EAPzC;AAQZd,QAAAA,GAAG,EAAEQ,IAAI,CAACO,OAAL,EARO;AASZd,QAAAA,KAAK,EAAEO,IAAI,CAACQ,QAAL,KAAkB,CATb;AAUZd,QAAAA,IAAI,EAAEM,IAAI,CAACS,WAAL;AAVM,OAAd;AAYD,K;;;;;;;2CAnBsB;AACrB;AACAC,MAAAA,aAAa,CAAC,KAAKZ,QAAN,CAAb;AACD;;;6BAkBQ;AAAA,wBASH,KAAKX,KATF;AAAA,UAELC,KAFK,eAELA,KAFK;AAAA,UAGLC,WAHK,eAGLA,WAHK;AAAA,UAILC,OAJK,eAILA,OAJK;AAAA,UAKLC,OALK,eAKLA,OALK;AAAA,UAMLC,GANK,eAMLA,GANK;AAAA,UAOLC,KAPK,eAOLA,KAPK;AAAA,UAQLC,IARK,eAQLA,IARK;AAUP,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,GADH,0BAEuBN,KAFvB,OAE+BE,OAF/B,OAEyCC,OAFzC,CADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BACmBC,GADnB,OACyBC,KADzB,OACiCC,IADjC,CALF,CADF;AAWD;;;;EA9DeT,S;;AAiElB,eAAeC,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    hours: \"\",\n    twelveHours: \"\",\n    minutes: \"\",\n    seconds: \"\",\n    day: \"\",\n    month: \"\",\n    year: \"\",\n    formatSwitch\n  };\n\n  componentDidMount = () => {\n    // Call this function so that it fetch first time right after mounting the component\n    this.getCurrentTime();\n\n    // set Interval\n    this.interval = setInterval(this.getCurrentTime, 1000);\n  };\n\n  componentWillUnmount() {\n    // Clear the interval right before component unmount\n    clearInterval(this.interval);\n  }\n\n  getCurrentTime = () => {\n    let time = new Date();\n    this.setState({\n      hours: time.getHours(),\n      twelveHours:\n        time.getHours() > 12 ? time.getHours() - 12 : time.gethours(),\n      minutes:\n        time.getMinutes() < 10 ? `0${time.getMinutes()}` : time.getMinutes(),\n      seconds:\n        time.getSeconds() < 10 ? `0${time.getSeconds()}` : time.getSeconds(),\n      day: time.getDate(),\n      month: time.getMonth() + 1,\n      year: time.getFullYear()\n    });\n  };\n\n  render() {\n    const {\n      hours,\n      twelveHours,\n      minutes,\n      seconds,\n      day,\n      month,\n      year\n    } = this.state;\n    return (\n      <div className=\"App\">\n        <div>\n          {\" \"}\n          the current time is {hours}:{minutes}:{seconds}\n        </div>\n        <div>\n          today's date is {day}/{month}/{year}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}